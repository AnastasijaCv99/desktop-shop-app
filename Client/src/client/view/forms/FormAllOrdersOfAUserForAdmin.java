/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package client.view.forms;

import client.communication.Communication;
import client.controller.ControllerClient;
import client.view.table.TableModelInvoicesForUser;
import client.view.table.TableModelOrdersForUser;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import zcommon.domain.Admin;
import zcommon.domain.Invoice;
import zcommon.domain.Order;
import zcommon.domain.User;

/**
 *
 * @author Korisnik
 */
public class FormAllOrdersOfAUserForAdmin extends javax.swing.JDialog {

    /**
     * Creates new form FormAllOrdersOfAUserForAdmin
     */
    
    User u;
    Admin a;
    
    public FormAllOrdersOfAUserForAdmin(java.awt.Dialog parent, boolean modal, User u, Admin a) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        
        this.u = u;
        this.a = a;
        txtUserName.setText("User: " + u.getName());
        txtUserName.setAlignmentY(RIGHT_ALIGNMENT);
        ControllerClient.getInstance().setAllOrdersOfUserForAdmin(this);
        
        fillUpTheTables();
        tblOrdersNotApproved.setModel(new TableModelOrdersForUser());
        tblInvoices.setModel(new TableModelInvoicesForUser());
        
        setSize(600, 600);
        setName("All orders");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrdersNotApproved = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblInvoices = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtUserName = new javax.swing.JLabel();
        approvebtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblOrdersNotApproved.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblOrdersNotApproved);

        tblInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblInvoices);

        jLabel1.setText("Invoices of approved orders:");

        jLabel2.setText("Orders waiting for approval:");

        jButton1.setText("GO BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtUserName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtUserName.setText("user");

        approvebtn.setText("APPROVE");
        approvebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approvebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(approvebtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(txtUserName)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(approvebtn))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void approvebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approvebtnActionPerformed
        // TODO add your handling code here:
        
        TableModelOrdersForUser tmo = (TableModelOrdersForUser) tblOrdersNotApproved.getModel();
        int row = tblOrdersNotApproved.getSelectedRow();
        if (row != -1) {
            Order newOrder = tmo.getOrder(row);
            Invoice i = new Invoice(0, newOrder.getTotalAmountPricee(), true, newOrder, a);
            /*try {
                Communication.getInstance().saveInvoice(i);
            } catch (IOException ex) {
                Logger.getLogger(FormAllOrdersOfAUserForAdmin.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            ControllerClient.getInstance().saveInvoice(i);
        }
        
    }//GEN-LAST:event_approvebtnActionPerformed

    public void handleListOfOrdersOfUser(ArrayList<Order> ordersOfUserForAdmin, boolean signal13) {
        if (signal13) {
            TableModelOrdersForUser tmon = (TableModelOrdersForUser) tblOrdersNotApproved.getModel();
            tmon.addOrders(ordersOfUserForAdmin);
        } else {
            JOptionPane.showMessageDialog(this, "Something went wrong");
            this.dispose();
        }
    }

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approvebtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblInvoices;
    private javax.swing.JTable tblOrdersNotApproved;
    private javax.swing.JLabel txtUserName;
    // End of variables declaration//GEN-END:variables

    private void fillUpTheTables() {
        /*try {
            Communication.getInstance().getOrdersOfUserForAdmin(u);
            Communication.getInstance().getInvoicesOfUserForAdmin(u);
        } catch (IOException ex) {
            Logger.getLogger(FormAllOrdersOfAUserForAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        ControllerClient.getInstance().getOrdersOfUserForAdmin(u);
        ControllerClient.getInstance().getInvoicesOfUserForAdmin(u);
    }

    public void handleListOfInvoicesOfUser(ArrayList<Invoice> invoicesOfUserForAdmin, boolean signal14) {
        if (signal14) {
            TableModelInvoicesForUser tmou = (TableModelInvoicesForUser) tblInvoices.getModel();
            tmou.addListOfInvoices(invoicesOfUserForAdmin);
        } else {
            JOptionPane.showMessageDialog(this, "Something went wrong");
            this.dispose();
        }
    }

    public void handleSavedInvoice(boolean signal9) {
        if (signal9) {
            JOptionPane.showMessageDialog(this, "Successfully approved order!");
        } else {
            JOptionPane.showMessageDialog(this, "Something went wrong");
        }
    }

    /*public void handleAllOrders(ArrayList<Order> ordersForAdmin, boolean signal7) {
        if (signal7) {
            TableModelInvoicesForUser tmi = (TableModelInvoicesForUser) tblInvoices.getModel();
            tmi.addList(ordersForAdmin);
        } else JOptionPane.showMessageDialog(this, "Something went wrong with table...");
    }*/
}
