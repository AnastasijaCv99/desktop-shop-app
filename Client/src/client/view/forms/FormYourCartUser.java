/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package client.view.forms;

import client.communication.Communication;
import client.controller.ControllerClient;
import client.view.table.TableModelOrderItems;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;
import zcommon.domain.Order;
import zcommon.domain.OrderItems;
import zcommon.domain.Product;
import zcommon.domain.User;

/**
 *
 * @author Korisnik
 */
public class FormYourCartUser extends javax.swing.JDialog {

    /**
     * Creates new form FormYourCartUser
     */
    User u;
    public FormYourCartUser(java.awt.Frame parent, boolean modal, User u) {
        super(parent, modal);
        initComponents();
        this.u = u;
        setLocationRelativeTo(null);
        //ControllerClient.getInstance().setYourCartf(this);
        txtWelcome.setText("Your cart, " + u.getName());
        tblItems.setModel(new TableModelOrderItems());
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtWelcome = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtWelcome.setText(" ");

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblItems.setRowSelectionAllowed(true);
        jScrollPane1.setViewportView(tblItems);

        jButton1.setText("ORDER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("REMOVE ITEM");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("GO BACK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(txtWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(txtWelcome)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(75, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 324, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton3)
                            .addComponent(jButton2))
                        .addGap(21, 21, 21))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //remove from cart
        ArrayList<OrderItems> listOfItems = TableModelOrderItems.getListOfItems();
        if (listOfItems.isEmpty()) {
            JOptionPane.showMessageDialog(this, "You have to add at least one product!");
            return;
        } else {
            int row = tblItems.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Please select a product!");
            } else {
                TableModelOrderItems tmoi = (TableModelOrderItems) tblItems.getModel();
                tmoi.removeProduct(row);
            }
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        ArrayList<OrderItems> listOfItems = TableModelOrderItems.getListOfItems();
        Double fullPrice = 0.0;
        
        if (listOfItems.isEmpty()) {
            JOptionPane.showMessageDialog(this, "You have to add at least one product!");
            return;
        }
        
        //going through the list to get the fullPrice that is in one Order
        for (OrderItems listOfItem : listOfItems) {
            //fullPrice = fullPrice + listOfItem.getQuantity()*listOfItem.getProductID().getPrice();
            fullPrice = fullPrice + listOfItem.getProductID().getPrice()*listOfItem.getQuantity();
            System.out.println("forma your cart: kolicina koja se kupuje: " +listOfItem.getQuantity());
            System.out.println("forma your cart: broj rezervacija: " + listOfItem.getProductID().getReservation());
            if (listOfItem.getQuantity()+listOfItem.getProductID().getReservation()>listOfItem.getProductID().getStock()){
                
                JOptionPane.showMessageDialog(this, "There is no available amount of " + listOfItem.getProductID().getTitle());
                return;
            }
        }
        //if quantity for a product plus product reservations is bigger that stock, cannot order
        Order newOrder = new Order(-1, fullPrice, u, null, listOfItems);
        int result = JOptionPane.showConfirmDialog(this, fullPrice, "This is the full price", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == result) {
            try {
                //save in db
                    Communication.getInstance().saveOrder(newOrder);
            } catch (IOException ex) {
                Logger.getLogger(FormYourCartUser.class.getName()).log(Level.SEVERE, null, ex);
                }
            //isprazni listu
            TableModelOrderItems tmoi = (TableModelOrderItems) tblItems.getModel();
            TableModelOrderItems.emptyList();
            tmoi.fireTableDataChanged();
            //firetabledata
        } else if (JOptionPane.NO_OPTION == result){
            System.out.println("NO");
            return;
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblItems;
    private javax.swing.JLabel txtWelcome;
    // End of variables declaration//GEN-END:variables

    public void handleAddToCart(Product chosenProduct) {
        TableModelOrderItems tmoi = (TableModelOrderItems) tblItems.getModel();
        tmoi.addProduct(chosenProduct);
    }

    private void refreshTable() {
        TableModelOrderItems tmoi = (TableModelOrderItems) tblItems.getModel();
        tmoi.fireTableDataChanged();
        
        /*JTextField cellediting = new JTextField();
        TableColumn colQuantity = tblItems.getColumnModel().getColumn(2);
        colQuantity.setCellEditor(new DefaultCellEditor(cellediting));
        tblItems.setEditingColumn(2);*/
        
    }
}
