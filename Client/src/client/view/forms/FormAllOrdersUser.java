/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package client.view.forms;

import client.communication.Communication;
import client.controller.ControllerClient;
import client.view.table.TableModelInvoicesForUser;
import client.view.table.TableModelOrdersForUser;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import zcommon.domain.Invoice;
import zcommon.domain.Order;
import zcommon.domain.OrderItems;
import zcommon.domain.User;

/**
 *
 * @author Korisnik
 */
public class FormAllOrdersUser extends javax.swing.JDialog {

    /**
     * Creates new form FormAllOrdersUser
     */
    User u;
    public FormAllOrdersUser(java.awt.Frame parent, boolean modal, User u) {
        super(parent, modal);
        initComponents();
        this.u = u;
        setLocationRelativeTo(parent);
        
        ControllerClient.getInstance().setAllordersuser(this);
        
        tblOrdersNotApproved.setModel(new TableModelOrdersForUser());
        tblInvoices.setModel(new TableModelInvoicesForUser());
        fillUpTheTableInvoices();
        fillUpTheTableNotApproved();
        
        setSize(800, 800);
        setName("All orders");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoices = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrdersNotApproved = new javax.swing.JTable();
        exit = new javax.swing.JButton();
        btnDetailsOrders = new javax.swing.JButton();
        btnDetailsInvoices = new javax.swing.JButton();
        invoiceToPDF = new javax.swing.JButton();
        allOrdersToPDF = new javax.swing.JButton();
        orderToPDF = new javax.swing.JButton();
        allInvoicecToPDF = new javax.swing.JButton();
        invoicesalltoExcell = new javax.swing.JButton();
        OrdersalltoExcell = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Your invoices for approved orders:");

        jLabel2.setText("Your orders waiting for approval:");

        tblInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblInvoices);

        tblOrdersNotApproved.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblOrdersNotApproved);

        exit.setText("GO BACK");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        btnDetailsOrders.setText("DETAILS");
        btnDetailsOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsOrdersActionPerformed(evt);
            }
        });

        btnDetailsInvoices.setText("DETAILS");
        btnDetailsInvoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsInvoicesActionPerformed(evt);
            }
        });

        invoiceToPDF.setText("Export ONE to PDF");
        invoiceToPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceToPDFActionPerformed(evt);
            }
        });

        allOrdersToPDF.setText("Export ALL to PDF");
        allOrdersToPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allOrdersToPDFActionPerformed(evt);
            }
        });

        orderToPDF.setText("Export ONE to PDF");
        orderToPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderToPDFActionPerformed(evt);
            }
        });

        allInvoicecToPDF.setText("Export ALL to PDF");
        allInvoicecToPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allInvoicecToPDFActionPerformed(evt);
            }
        });

        invoicesalltoExcell.setText("Export ALL to Excel");
        invoicesalltoExcell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoicesalltoExcellActionPerformed(evt);
            }
        });

        OrdersalltoExcell.setText("Export ALL to Excel");
        OrdersalltoExcell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdersalltoExcellActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDetailsInvoices)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDetailsOrders))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(invoiceToPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(allOrdersToPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(orderToPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(allInvoicecToPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(invoicesalltoExcell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OrdersalltoExcell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(invoiceToPDF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allInvoicecToPDF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(invoicesalltoExcell)))
                .addGap(18, 18, 18)
                .addComponent(btnDetailsInvoices)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(orderToPDF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allOrdersToPDF)
                        .addGap(58, 58, 58)
                        .addComponent(OrdersalltoExcell))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit)
                    .addComponent(btnDetailsOrders))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void btnDetailsOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsOrdersActionPerformed
        
        TableModelOrdersForUser tmou = (TableModelOrdersForUser) tblOrdersNotApproved.getModel();
        int row = tblOrdersNotApproved.getSelectedRow();
        if (row != -1) {
            Order o = tmou.getOrder(row);
            new FormDetailsOfOrderForUser(this, true, o, null).setVisible(true);
        } else JOptionPane.showMessageDialog(this, "You have to choose an order!");        
    }//GEN-LAST:event_btnDetailsOrdersActionPerformed

    private void btnDetailsInvoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsInvoicesActionPerformed
        TableModelInvoicesForUser tmiu = (TableModelInvoicesForUser) tblInvoices.getModel();
        int row = tblInvoices.getSelectedRow();
        if (row != -1) {
            Invoice i = tmiu.getInvoice(row);
            new FormDetailsOfOrderForUser(this, true, null, i).setVisible(true);
        } else JOptionPane.showMessageDialog(this, "You have to choose an order!");        
    }//GEN-LAST:event_btnDetailsInvoicesActionPerformed

    private void invoiceToPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceToPDFActionPerformed
        //EXPORT INVOICE TO PDF
        TableModelInvoicesForUser tmiu = (TableModelInvoicesForUser) tblInvoices.getModel();
        int row = tblInvoices.getSelectedRow();
        if (row != -1) {
            Invoice i = tmiu.getInvoice(row);
            ArrayList<Invoice> invoices = new ArrayList<>();
            invoices.add(i);
            /*try {
                Communication.getInstance().exportInvoicesToPdf(invoices);
            } catch (IOException ex) {
                Logger.getLogger(FormAllOrdersUser.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            ControllerClient.getInstance().exportInvoicesToPdf(invoices);
        }  else JOptionPane.showMessageDialog(this, "You have to choose an order!");
    }//GEN-LAST:event_invoiceToPDFActionPerformed

    private void orderToPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderToPDFActionPerformed
        //EXPORT ONE ORDER TO PDF
        TableModelOrdersForUser tmou = (TableModelOrdersForUser) tblOrdersNotApproved.getModel();
        int row = tblOrdersNotApproved.getSelectedRow();
        if (row != -1) {
            Order o = tmou.getOrder(row);
            ArrayList<Order> orders = new ArrayList<>();
            orders.add(o);
            /*try {
                Communication.getInstance().exportOrdersToPdf(orders);
            } catch (IOException ex) {
                Logger.getLogger(FormAllOrdersUser.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            ControllerClient.getInstance().exportOrdersToPdf(orders);
        } else JOptionPane.showMessageDialog(this, "You have to choose an order!");
    }//GEN-LAST:event_orderToPDFActionPerformed

    private void allOrdersToPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allOrdersToPDFActionPerformed
        // EXPORT ALL ORDERS TO PDF
        TableModelOrdersForUser tmou = (TableModelOrdersForUser) tblOrdersNotApproved.getModel();
        ArrayList<Order> orders = tmou.getOrders();
        
        /*try {
            Communication.getInstance().exportOrdersToPdf(orders);
        } catch (IOException ex) {
            Logger.getLogger(FormAllOrdersUser.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        ControllerClient.getInstance().exportOrdersToPdf(orders);
    }//GEN-LAST:event_allOrdersToPDFActionPerformed

    private void allInvoicecToPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allInvoicecToPDFActionPerformed
        // export ALL INVOICES TO PDF
        TableModelInvoicesForUser tmiu = (TableModelInvoicesForUser) tblInvoices.getModel();
    
        ArrayList<Invoice> invoices = tmiu.getInvoices();
        /*try {
            Communication.getInstance().exportInvoicesToPdf(invoices);
        } catch (IOException ex) {
            Logger.getLogger(FormAllOrdersUser.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        ControllerClient.getInstance().exportInvoicesToPdf(invoices);
    }//GEN-LAST:event_allInvoicecToPDFActionPerformed

    private void OrdersalltoExcellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdersalltoExcellActionPerformed
        // TODO add your handling code here:
        TableModelOrdersForUser tmou = (TableModelOrdersForUser) tblOrdersNotApproved.getModel();
        ArrayList<Order> orders = tmou.getOrders();
        
        /*try {
            Communication.getInstance().exportOrdersToExcel(orders);
        } catch (IOException ex) {
            Logger.getLogger(FormAllOrdersUser.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        ControllerClient.getInstance().exportOrdersToExcel(orders);
    }//GEN-LAST:event_OrdersalltoExcellActionPerformed

    private void invoicesalltoExcellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoicesalltoExcellActionPerformed
        TableModelInvoicesForUser tmiu = (TableModelInvoicesForUser) tblInvoices.getModel();
        ArrayList<Invoice> invoices = tmiu.getInvoices();
        
        /*try {
            Communication.getInstance().exportInvoicesToExcel(invoices);
        } catch (IOException ex) {
            Logger.getLogger(FormAllOrdersUser.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        ControllerClient.getInstance().exportInvoicesToExcel(invoices);
    }//GEN-LAST:event_invoicesalltoExcellActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OrdersalltoExcell;
    private javax.swing.JButton allInvoicecToPDF;
    private javax.swing.JButton allOrdersToPDF;
    private javax.swing.JButton btnDetailsInvoices;
    private javax.swing.JButton btnDetailsOrders;
    private javax.swing.JButton exit;
    private javax.swing.JButton invoiceToPDF;
    private javax.swing.JButton invoicesalltoExcell;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton orderToPDF;
    private javax.swing.JTable tblInvoices;
    private javax.swing.JTable tblOrdersNotApproved;
    // End of variables declaration//GEN-END:variables

    private void fillUpTheTableInvoices() {
        /*try {
            Communication.getInstance().getListOfInvoicesForUser(u);
        } catch (IOException ex) {
            Logger.getLogger(FormAllOrdersUser.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        ControllerClient.getInstance().getListOfInvoicesForUser(u);
    }

    public void handleListOfInvoices(ArrayList<Invoice> invoices, boolean signal10) {
        TableModelInvoicesForUser tmou = (TableModelInvoicesForUser) tblInvoices.getModel();
        if (signal10) {
            for (Invoice invoice : invoices) {
                System.out.println("invoice: " + invoice.getInvoiceID());
                System.out.println("orderid: " + invoice.getOrderID().getOrderID());
            }
            tmou.addListOfInvoices(invoices);
            
            /*
            TableColumn sportColumn = table.getColumnModel().getColumn(2);
...
JComboBox comboBox = new JComboBox();
comboBox.addItem("Snowboarding");
comboBox.addItem("Rowing");
comboBox.addItem("Chasing toddlers");
comboBox.addItem("Speed reading");
comboBox.addItem("Teaching high school");
comboBox.addItem("None");
sportColumn.setCellEditor(new DefaultCellEditor(comboBox));
            
            TableColumn thirdCol = tblInvoices.getColumnModel().getColumn(2);
            JComboBox<String> cmb = new JComboBox<>();
            cmb.removeAllItems();
            for (Invoice i : invoices) {
                ArrayList<OrderItems> items = i.getOrderID().getListOfItem();
                for (OrderItems oi : items) {
                    cmb.addItem(oi.getProductID().getTitle());
                }
            }
            thirdCol.setCellEditor(new DefaultCellEditor(cmb));
            
            
            */
        } else System.out.println("greska sa invoicima");
    }

    private void fillUpTheTableNotApproved() {
        /*try {
            Communication.getInstance().getAllDissapprovedOrders(u);
        } catch (IOException ex) {
            Logger.getLogger(FormAllOrdersUser.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        ControllerClient.getInstance().getAllDissapprovedOrders(u);
    }

    public void handleListOfOrders(ArrayList<Order> ordersForUser, boolean signal11) {
        if (signal11) {
            TableModelOrdersForUser tmon = (TableModelOrdersForUser) tblOrdersNotApproved.getModel();
            tmon.addOrders(ordersForUser);
        } else JOptionPane.showMessageDialog(this, "greska");
    }

    public void handlePDFCreationOrder(boolean signal15, String messagePDF) {
        JOptionPane.showMessageDialog(this, messagePDF);
    }

    public void handlePDFCreationInvoice(String messagePDFInvoice) {
        JOptionPane.showMessageDialog(this, messagePDFInvoice);
    }

    public void handleExcelCreationOrder(String messageEXCELOrder) {
        JOptionPane.showMessageDialog(this, messageEXCELOrder);
    }

    public void handleExcelCreationInvoice(String messageEXCELInvoice) {
        JOptionPane.showMessageDialog(this, messageEXCELInvoice);
    }
}
